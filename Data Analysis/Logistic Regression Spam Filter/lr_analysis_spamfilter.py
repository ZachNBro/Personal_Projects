# -*- coding: utf-8 -*-
"""logistic_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ja86rsfRroKdD8yPsezxdOIOoMPHvMow
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from ucimlrepo import fetch_ucirepo

# Fetch dataset
spambase = fetch_ucirepo(id=94)

X = spambase.data.features  # Independent variables (word, symbol, and pattern count)
y = spambase.data.targets    # Dependent variable (Spam / Not Spam)

# Convert y to a Series for plotting; sns.countplot expects a one-dimensional input
y = y.squeeze()

# Begin exploring the data
print(X.dtypes)  # Display the data type of each feature

print("\nMissing values in each column:\n", X.isnull().sum())  # Check for missing values

# Feature names for the dataset
feature_names = X.columns.tolist()

# Create DataFrame for visualizations
X_df = pd.DataFrame(X, columns=feature_names)

# Summary statistics for numerical values
print(X_df.describe())

# Bar chart for the distribution of the target variable
plt.figure(figsize=(8, 6))
sns.countplot(x=y)
plt.title('Distribution of Target Variable (Spam/Not Spam)')
plt.xlabel('Spam / Not Spam')
plt.ylabel('Count')
plt.show()

# Heatmap to find the features most related to spam
# Add the target variable to the DataFrame
X_df['Spam'] = y

# Compute the correlation matrix including the target variable
corr_matrix = X_df.corr()

# Select the top 8 features based on their correlation with the target variable
top_features = corr_matrix['Spam'].abs().sort_values(ascending=False).index[1:9]  # Exclude 'Spam'

# Subset the correlation matrix for the top features
top_corr_matrix = corr_matrix.loc[top_features, top_features]

# Generate and show the heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(top_corr_matrix, annot=True, fmt=".2f", cmap='coolwarm', cbar=True,
            square=True, linewidths=.5, vmin=-1, vmax=1)
plt.title('Correlation Heatmap of Top Features with Spam', fontsize=16)
plt.show()

# Function for plotting histograms
def plot_histogram(data, feature):
    plt.figure(figsize=(10, 6))
    sns.histplot(data[feature], kde=True, bins=30)
    plt.title(f'Distribution of {feature}')
    plt.xlabel(feature)
    plt.ylabel('Frequency')
    plt.show()

# Function for plotting boxplots
def plot_boxplot(data, target, feature):
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=target, y=data[feature])
    plt.title(f'{feature} by Spam/Not Spam')
    plt.xlabel('Spam / Not Spam')
    plt.ylabel(feature)
    plt.show()

# Plots for exploratory analysis
# Selected top features for visualizations
selected_features = ['word_freq_your', 'word_freq_free', 'word_freq_000',
                     'word_freq_remove', 'char_freq_$']

# Loop to pass parameters to plot functions
for feature in selected_features:
    plot_histogram(X_df, feature)
    plot_boxplot(X_df, y, feature)

pip install ucimlrepo
